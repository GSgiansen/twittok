{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  /**\n   * listen to Postgres changes.\n   */\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  constructor( /** Topic name can be any string. */\n  topic, params = {\n    config: {}\n  }, socket) {\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this._onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket._remove(this);\n    });\n    this._onError(reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return;\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this._trigger(this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n  /** Subscribe registers your client with the server */\n  subscribe(callback, timeout = this.timeout) {\n    var _a, _b;\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      const {\n        config: {\n          broadcast,\n          presence\n        }\n      } = this.params;\n      this._onError(e => callback && callback('CHANNEL_ERROR', e));\n      this._onClose(() => callback && callback('CLOSED'));\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : []\n      };\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken;\n      }\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n      this._rejoin(timeout);\n      this.joinPush.receive('ok', ({\n        postgres_changes: serverPostgresFilters\n      }) => {\n        var _a;\n        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);\n        if (serverPostgresFilters === undefined) {\n          callback && callback('SUBSCRIBED');\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback('SUBSCRIBED');\n          return;\n        }\n      }).receive('error', error => {\n        callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback && callback('TIMED_OUT');\n        return;\n      });\n    }\n    return this;\n  }\n  presenceState() {\n    return this.presence.state;\n  }\n  track(payload, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'track',\n        payload\n      }, opts.timeout || this.timeout);\n    });\n  }\n  untrack(opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'untrack'\n      }, opts);\n    });\n  }\n  on(type, filter, callback) {\n    return this._on(type, filter, callback);\n  }\n  send(payload, opts = {}) {\n    return new Promise(resolve => {\n      var _a, _b, _c;\n      const push = this._push(payload.type, payload, opts.timeout || this.timeout);\n      if (push.rateLimited) {\n        resolve('rate limited');\n      }\n      if (payload.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n        resolve('ok');\n      }\n      push.receive('ok', () => resolve('ok'));\n      push.receive('timeout', () => resolve('timed out'));\n    });\n  }\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving;\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n    };\n    this.rejoinTimer.reset();\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy();\n    return new Promise(resolve => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    });\n  }\n  /** @internal */\n  _push(event, payload, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n    let pushEvent = new Push(this, event, payload, timeout);\n    if (this._canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n    return pushEvent;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event, payload, _ref) {\n    return payload;\n  }\n  /** @internal */\n  _isMember(topic) {\n    return this.topic === topic;\n  }\n  /** @internal */\n  _joinRef() {\n    return this.joinPush.ref;\n  }\n  /** @internal */\n  _trigger(type, payload, ref) {\n    var _a, _b;\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return;\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref);\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n        }\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n  /** @internal */\n  _isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n  /** @internal */\n  _isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n  /** @internal */\n  _isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n  /** @internal */\n  _isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n  /** @internal */\n  _replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n  /** @internal */\n  _on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n    return this;\n  }\n  /** @internal */\n  _off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n      var _a;\n      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n    });\n    return this;\n  }\n  /** @internal */\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** @internal */\n  _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n    if (this.socket.isConnected()) {\n      this._rejoin();\n    }\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  _onClose(callback) {\n    this._on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  _onError(callback) {\n    this._on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  _canPush() {\n    return this.socket.isConnected() && this._isJoined();\n  }\n  /** @internal */\n  _rejoin(timeout = this.timeout) {\n    if (this._isLeaving()) {\n      return;\n    }\n    this.socket._leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n  /** @internal */\n  _getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n    return records;\n  }\n}","map":{"version":3,"names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","Transformers","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","RealtimeChannel","constructor","topic","params","config","socket","bindings","state","closed","joinedOnce","pushBuffer","Object","assign","broadcast","ack","self","presence","key","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","subscribe","callback","e","accessTokenPayload","postgres_changes","_b","_a","map","r","filter","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","setAuth","undefined","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","presenceState","track","opts","type","untrack","on","Promise","resolve","_push","rateLimited","_c","updatePayload","leaving","onClose","close","destroy","leavePush","leave","_canPush","trigger","startTimeout","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","bindId","bindEvent","ids","data","_e","_d","_f","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","k","isConnected","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record"],"sources":["/Users/tangiansen/Desktop/development/tiktok2324/backend/frontend/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport type RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, {\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport type {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowledge that broadcast message was received\n     */\n    broadcast?: { self?: boolean; ack?: boolean }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string }\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<\n  T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`\n> = {\n  /**\n   * The type of database change to listen to.\n   */\n  event: T\n  /**\n   * The database schema to listen to.\n   */\n  schema: string\n  /**\n   * The database table to listen to.\n   */\n  table?: string\n  /**\n   * Receive database changes when filter is matched.\n   */\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  /**\n   * listen to Postgres changes.\n   */\n  POSTGRES_CHANGES = 'postgres_changes',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '' },\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this._rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const {\n        config: { broadcast, presence },\n      } = this.params\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\n      this._onClose(() => callback && callback('CLOSED'))\n\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes:\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\n      }\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken\n      }\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive(\n          'ok',\n          ({\n            postgres_changes: serverPostgresFilters,\n          }: {\n            postgres_changes: {\n              id: string\n              event: string\n              schema?: string\n              table?: string\n              filter?: string\n            }[]\n          }) => {\n            this.socket.accessToken &&\n              this.socket.setAuth(this.socket.accessToken)\n\n            if (serverPostgresFilters === undefined) {\n              callback && callback('SUBSCRIBED')\n              return\n            } else {\n              const clientPostgresBindings = this.bindings.postgres_changes\n              const bindingsLen = clientPostgresBindings?.length ?? 0\n              const newPostgresBindings = []\n\n              for (let i = 0; i < bindingsLen; i++) {\n                const clientPostgresBinding = clientPostgresBindings[i]\n                const {\n                  filter: { event, schema, table, filter },\n                } = clientPostgresBinding\n                const serverPostgresFilter =\n                  serverPostgresFilters && serverPostgresFilters[i]\n\n                if (\n                  serverPostgresFilter &&\n                  serverPostgresFilter.event === event &&\n                  serverPostgresFilter.schema === schema &&\n                  serverPostgresFilter.table === table &&\n                  serverPostgresFilter.filter === filter\n                ) {\n                  newPostgresBindings.push({\n                    ...clientPostgresBinding,\n                    id: serverPostgresFilter.id,\n                  })\n                } else {\n                  this.unsubscribe()\n                  callback &&\n                    callback(\n                      'CHANNEL_ERROR',\n                      new Error(\n                        'mismatch between server and client bindings for postgres changes'\n                      )\n                    )\n                  return\n                }\n              }\n\n              this.bindings.postgres_changes = newPostgresBindings\n\n              callback && callback('SUBSCRIBED')\n              return\n            }\n          }\n        )\n        .receive('error', (error: { [key: string]: any }) => {\n          callback &&\n            callback(\n              'CHANNEL_ERROR',\n              new Error(\n                JSON.stringify(Object.values(error).join(', ') || 'error')\n              )\n            )\n          return\n        })\n        .receive('timeout', () => {\n          callback && callback('TIMED_OUT')\n          return\n        })\n    }\n\n    return this\n  }\n\n  presenceState<\n    T extends { [key: string]: any } = {}\n  >(): RealtimePresenceState<T> {\n    return this.presence.state as RealtimePresenceState<T>\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /**\n   * Creates an event handler that listens to changes.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  /**\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\n   * @param callback Function to be invoked when event handler is triggered.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    return this._on(type, filter, callback)\n  }\n\n  send(\n    payload: { type: string; [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return new Promise((resolve) => {\n      const push = this._push(\n        payload.type,\n        payload,\n        opts.timeout || this.timeout\n      )\n\n      if (push.rateLimited) {\n        resolve('rate limited')\n      }\n\n      if (\n        payload.type === 'broadcast' &&\n        !this.params?.config?.broadcast?.ack\n      ) {\n        resolve('ok')\n      }\n\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => resolve('timed out'))\n    })\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.rejoinTimer.reset()\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    return new Promise((resolve) => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    })\n  }\n\n  /** @internal */\n  _push(\n    event: string,\n    payload: { [key: string]: any },\n    timeout = this.timeout\n  ) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return (\n            bind.filter?.event === '*' ||\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\n          )\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\n          ) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() ===\n                    payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return (\n                bindEvent === '*' ||\n                bindEvent === payload?.event?.toLocaleLowerCase()\n              )\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } =\n              postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n      return !(\n        bind.type?.toLocaleLowerCase() === typeLower &&\n        RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(\n        payload.columns,\n        payload.record\n      )\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(\n        payload.columns,\n        payload.old_record\n      )\n    }\n\n    return records\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}